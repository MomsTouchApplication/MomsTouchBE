buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'

    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

jacoco {
    toolVersion = "0.8.7"
}


group = 'com.momstouch'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' // MariaDB

    // querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    // File 관련 메서드
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20220320'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    /*implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'*/


    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core:4.8.0'

// https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'

}

tasks.test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}



tasks.jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false
    }

    def Qdomains = []
    for (qPattern in "**/QA".."**/QZ") {
        Qdomains.add(qPattern + "*")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: ["**/*BEApplication*",
                                                "**/*Config*",
                                                "**/*Dto*",
                                                "**/*Jwt*",
                                                "**/*DataFormatProvider*",
                                                "**/*ControllerAdvice*",
                                                "**/*Exception*",
                                                "**/*Condition*",
                                                "**/*Init*",
                                                "**/*BaseTime**",
                                                "**/*Foramtter**",
                                                "**/*ReservationStatusReqConverter**",
                                                "**/*Response*.*",
                                                "**/*Request*.*",
                                                "**/*Builder*.*",
                                                "**/*Handler*.*",
                                                "**/*Util*.*",
                                                "**/*Alarm*.*",
                                                "**/*OAuth2*.*",
                    ] + Qdomains)
                }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

tasks.jacocoTestCoverageVerification {
    def Qdomains = []

    for (qPattern in 'A' .. 'Z') {
        Qdomains.add("*.Q${qPattern}*")
    }

    afterEvaluate {

        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: ["**/*Application*",
                                                "**/*Request*",
                                                "**/*Command*",
                                                "**/*Dto*",
                                                "**/*BaseTime**",
                                                "**/*Foramtter**",
                                                "**/*ReservationStatusReqConverter**"
                    ] + Qdomains)
                }))
    }


    violationRules {
        rule {
            enabled = true // 활성화
            element = 'CLASS' // 클래스 단위로 커버리지 체크


            // includes = []

//            // 라인 커버리지를 최소한 80% 만족시켜야 합니다.
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.80
//            }
//
//            // 브랜치 커버리지를 최소한 80% 만족시켜야 합니다.
//            limit {
//                counter = 'BRANCH'
//                value = 'COVEREDRATIO'
//                minimum = 0.80
//            }
//
//            // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한합니다.
//            limit {
//                counter = 'LINE'
//                value = 'TOTALCOUNT'
//                maximum = 200
//            }


            excludes = ["**/*Request*.*",
                        "**/*Response*.*",
                        "**/*Command*.*"
            ] + Qdomains
        }

    }
}

springBoot {
    buildInfo()
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl { //이놈
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets { //이놈
    main.java.srcDir querydslDir
}

configurations { // 이놈
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl { // 이놈
    options.annotationProcessorPath = configurations.querydsl
}